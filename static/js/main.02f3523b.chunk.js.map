{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Footer.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","_ref","robots","map","user","i","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","Footer","App","state","searchfield","onSearchChangeHandler","event","_this","setState","target","value","console","log","_this2","this","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAeeA,EAbF,SAACC,GAAU,IACZC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,MAAOC,EAAOH,EAAPG,GACrB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2EACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,QAAQC,IAAG,iCAAAC,OAAmCP,EAAnC,mBACpBC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAMN,GACpBG,EAAAC,EAAAC,cAAA,SAAIJ,MCaLS,EAlBE,SAAAC,GAAgB,IAAbC,EAAaD,EAAbC,OAChB,OACIT,EAAAC,EAAAC,cAAA,WAEQO,EAAOC,IAAI,SAACC,EAAMC,GACd,OACIZ,EAAAC,EAAAC,cAACW,EAAD,CACIC,IAAKF,EACLb,GAAIU,EAAOG,GAAGb,GACdF,KAAMY,EAAOG,GAAGf,KAChBC,MAAOW,EAAOG,GAAGd,YCC9BiB,EAbG,SAAAP,GAAsB,IAAnBQ,EAAmBR,EAAnBQ,aACjB,OACIhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,SACIC,UAAU,0CACVc,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCXI,EARA,SAACxB,GACZ,OACII,EAAAC,EAAAC,cAAA,OAAKmB,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACjE5B,EAAM6B,WCOJC,EAVA,WAEX,OACI1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BAEXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAb,+BAAqDH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,MAAhB,iDAArD,OCyCGwB,oNAvCXC,MAAQ,CACJnB,OAAQ,GACRoB,YAAa,MASjBC,sBAAwB,SAACC,GACrBC,EAAKC,SAAS,CAAEJ,YAAaE,EAAMG,OAAOC,QAC1CC,QAAQC,IAAIN,EAAMG,OAAOC,2FART,IAAAG,EAAAC,KAChBC,MAAM,8CACDC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIN,EAAKL,SAAS,CAAExB,OAAQmC,uCAStC,IAAAC,EAC2BN,KAAKX,MAA7BnB,EADHoC,EACGpC,OAAQoB,EADXgB,EACWhB,YACViB,EAAiBrC,EAAOsC,OAAO,SAAAC,GACjC,OAAOA,EAAMnD,KAAKoD,cAAcC,SAASrB,EAAYoB,iBAEzD,OAAKxC,EAAO0C,OAIJnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,cACAH,EAAAC,EAAAC,cAACkD,EAAD,CAAWpC,aAAcuB,KAAKT,wBAC9B9B,EAAAC,EAAAC,cAACmD,EAAD,KACIrD,EAAAC,EAAAC,cAACoD,EAAD,CAAU7C,OAAQqC,KAEtB9C,EAAAC,EAAAC,cAACqD,EAAD,OATDvD,EAAAC,EAAAC,cAAA,+BAxBDsD,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECRJC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.02f3523b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = (props) => {\r\n    const { name, email, id } = props;\r\n    return (\r\n        <div className=\"tc bg-light-blue hover-bg-washed-blue dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img alt=\"robot\" src={`https://robohash.org/my-robot-${id}?size=150x150`} />\r\n            <div>\r\n                <h2 className=\"f4\">{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (\r\n                        <Card\r\n                            key={i}\r\n                            id={robots[i].id}\r\n                            name={robots[i].name}\r\n                            email={robots[i].email} />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <div className=\"pa3\">\r\n            <input\r\n                className=\"pa2 ba b--light-blue br2 bg-washed-blue\"\r\n                type=\"search\"\r\n                placeholder=\"Search robots\"\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: \"scroll\", border: \"1px solid black\", height: \"650px\" }}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;\r\n","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n\r\n    return (\r\n        <div className=\"f6 tc bg-navy white pa2 bw2\"\r\n        >\r\n            <p className=\"ma0 tac\">&copy; 2019 Coded by MarieVal <span className=\"f7\">(based on the Zero To Mastery course project)</span> </p>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Footer;\r\n\r\n\r\n/*\r\n\r\n\r\nstyle={{\r\n                position: \"fixed\", bottom: 0, left: 0, textAlign: \"center\",\r\n                color: \"white\", padding: \"0.5rem\", margin: \"0\", backgroundColor: \"#001b44\"\r\n            }}\r\n*/","import React, { Component } from 'react';\r\n\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport Footer from \"../components/Footer\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n    state = {\r\n        robots: [],\r\n        searchfield: \"\"\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n            .then(response => response.json())\r\n            .then(users => this.setState({ robots: users }))\r\n    }\r\n\r\n    onSearchChangeHandler = (event) => {\r\n        this.setState({ searchfield: event.target.value })\r\n        console.log(event.target.value);\r\n\r\n    }\r\n\r\n    render() {\r\n        const { robots, searchfield } = this.state;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n        });\r\n        if (!robots.length) {\r\n            return <h1>Loading...</h1>\r\n        } else {\r\n            return (\r\n                <div className=\"tc\" >\r\n                    <h1 className=\"f1\">Meet-Robot</h1>\r\n                    <SearchBox searchChange={this.onSearchChangeHandler} />\r\n                    <Scroll>\r\n                        <CardList robots={filteredRobots} />\r\n                    </Scroll>\r\n                    <Footer />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from \"./containers/App\";\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}